# **************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
# **************************************************************************

"""
Multi socket API usage with libevent 2
"""

"""
/* Example application source code using the multi socket interface to
   download many files at once.

Written by Jeff Pohlmeyer

Requires libevent version 2 and a (POSIX?) system that has mkfifo().

This is an adaptation of libcurl's "hipev.c" and libevent's "event-test.c"
sample programs.

When running, the program creates the named pipe "hiper.fifo"

Whenever there is input into the fifo, the program reads the input as a list
of URL's and creates some new easy handles to fetch each URL via the
curl_multi "hiper" API.


Thus, you can try a single URL:
  % echo http://www.yahoo.com > hiper.fifo

Or a whole bunch of them:
  % cat my-url-list > hiper.fifo

The fifo buffer is handled almost instantly, so you can even add more URL's
while the previous requests are still being downloaded.

Note:
  For the sake of simplicity, URL length is limited to 1023 char's !

This is purely a demo app, all retrieved data is simply discarded by the write
callback.

*/
"""

import sys
import ctypes as ct
#include <sys/poll.h>
#include <event2/event.h>
#include <event2/event_struct.h>

import libcurl as lcurl
from curl_utils import *  # noqa

MSG_OUT = sys.stdout  # Send info to stdout, change to stderr if you want


class GlobalInfo(ct.Structure):
    # Global information, common to all connections
    _fields_ = [
    struct event_base * evbase;
    ("fifo_event",    struct event),
    ("timer_event",   struct event),
    ("multi",         ct.POINTER(lcurl.CURLM)),
    ("still_running", ct.c_int),
    FILE *input;
    ("stopped",       ct.c_bool),
]


class ConnInfo(ct.Structure):
    # Information associated with a specific easy handle
    _fields_ = [
    ("easy",   ct.POINTER(lcurl.CURL)),
    ("url",    ct.c_char_p),
    ("global", ct.POINTER(GlobalInfo)),
    ("error",  ct.c_char * lcurl.CURL_ERROR_SIZE),
]


class SockInfo(ct.Structure):
    # Information associated with a specific socket
    _fields_ = [
    ("sockfd",  lcurl.socket_t),
    ("easy",    ct.POINTER(lcurl.CURL)),
    ("action",  ct.c_int),
    ("timeout", ct.c_long),
    ("ev",      struct event),
    ("global",  ct.POINTER(GlobalInfo)),
]


def mcode_or_die(where: str, mcode: lcurl.CURLMcode):
    # Die if we get a bad CURLMcode somewhere

    if mcode == lcurl.CURLM_OK:
        return

    if mcode == lcurl.CURLM_BAD_HANDLE:
        s = "CURLM_BAD_HANDLE"
    elif mcode == lcurl.CURLM_BAD_EASY_HANDLE:
        s = "CURLM_BAD_EASY_HANDLE"
    elif mcode == lcurl.CURLM_OUT_OF_MEMORY:
        s = "CURLM_OUT_OF_MEMORY"
    elif mcode == lcurl.CURLM_INTERNAL_ERROR:
        s = "CURLM_INTERNAL_ERROR"
    elif mcode == lcurl.CURLM_UNKNOWN_OPTION:
        s = "CURLM_UNKNOWN_OPTION"
    elif mcode == lcurl.CURLM_LAST:
        s = "CURLM_LAST"
    elif mcode == lcurl.CURLM_BAD_SOCKET:
        s = "CURLM_BAD_SOCKET";
        print("ERROR: %s returns %s" % (where, s), file=MSG_OUT)
        # ignore this error
        return
    else:
        s = "CURLM_unknown"
    print("ERROR: %s returns %s" % (where, s), file=MSG_OUT)

    sys.exit(mcode)


@lcurl.multi_timer_callback
def multi_timer_cb(multi, timeout_ms, userp):
    # Update the event timer after curl_multi library calls
    g: GlobalInfo = ct.cast(userp, ct.POINTER(GlobalInfo)).contents

    timeout = lcurl.timeval(tv_sec =(timeout_ms // 1000),
                            tv_usec=(timeout_ms %  1000) * 1000)

    print("multi_timer_cb: Setting timeout to %ld ms" % timeout_ms, file=MSG_OUT)

    # if timeout_ms is -1, just delete the timer
    #
    # For all other values of timeout_ms, this should set or *update* the timer
    # to the new value
    if timeout_ms == -1:
        evtimer_del(ct.byref(g.timer_event))
    else:  # includes timeout zero
        evtimer_add(ct.byref(g.timer_event), ct.byref(timeout))
    return 0


def check_multi_info(g: GlobalInfo):
    # Check for completed transfers, and remove their easy handles

    print("REMAINING: %d" % g.still_running, file=MSG_OUT)

    while True:
        msgs_left = ct.c_int()
        msgp: ct.POINTER(lcurl.CURLMsg) = lcurl.multi_info_read(g.multi,
                                                                ct.byref(msgs_left))
        if not msgp: break
        msg = msgp.contents

        if msg.msg != lcurl.CURLMSG_DONE:
            continue

        easy: ct.POINTER(lcurl.CURL) = msg.easy_handle
        res:  lcurl.CURLcode         = msg.data.result

        conn = ct.POINTER(ConnInfo)()
        eff_url = ct.c_char_p(None)
        lcurl.easy_getinfo(easy, lcurl.CURLINFO_PRIVATE, ct.byref(conn))
        lcurl.easy_getinfo(easy, lcurl.CURLINFO_EFFECTIVE_URL, ct.byref(eff_url))
        print("DONE: %s => (%d) %s" % (eff_url, res, conn->error), file=MSG_OUT)

        lcurl.multi_remove_handle(g.multi, easy)
        libc.free(conn->url)
        lcurl.easy_cleanup(easy)
        libc.free(conn)

    if g.still_running == 0 and g.stopped:
        event_base_loopbreak(g.evbase)


def event_cb(int fd, short kind, void *userp):
    # Called by libevent when we get action on a multi socket
    g: GlobalInfo = ct.cast(userp, ct.POINTER(GlobalInfo)).contents

    action: int = ((lcurl.CURL_CSELECT_IN  if (kind & EV_READ)  else 0) |
                   (lcurl.CURL_CSELECT_OUT if (kind & EV_WRITE) else 0))

    rc: lcurl.CURLMcode = lcurl.multi_socket_action(g.multi, fd, action,
                                                    ct.byref(g.still_running))
    mcode_or_die("event_cb: libcurl.multi_socket_action", rc)

    check_multi_info(g)
    if g.still_running <= 0:
        print("last transfer done, kill timeout", file=MSG_OUT)
        if evtimer_pending(ct.byref(g.timer_event), None):
            evtimer_del(ct.byref(g.timer_event))


def timer_cb(int fd, short kind, void *userp):
    # Called by libevent when our timeout expires
    g: GlobalInfo = ct.cast(userp, ct.POINTER(GlobalInfo)).contents

    rc: lcurl.CURLMcode = lcurl.multi_socket_action(g.multi, lcurl.CURL_SOCKET_TIMEOUT,
                                                    0, ct.byref(g.still_running))
    mcode_or_die("timer_cb: libcurl.multi_socket_action", rc)
    check_multi_info(g)



def remsock(SockInfo *f):
    # Clean up the SockInfo structure
    if f:
        if event_initialized(&f->ev):
            event_del(&f->ev);
        free(f);


def setsock(SockInfo *f, s: lcurl.socket_t, e: ct.POINTER(lcurl.CURL), int act, g: GlobalInfo):
    # Assign information to a SockInfo structure

    kind: int = ((EV_READ  if act & lcurl.CURL_POLL_IN  else 0) |
                 (EV_WRITE if act & lcurl.CURL_POLL_OUT else 0) |
                 EV_PERSIST)

    f->sockfd = s
    f->action = act
    f->easy   = e
    if event_initialized(&f->ev):
        event_del(&f->ev);
    event_assign(&f->ev, g.evbase, f->sockfd, kind, event_cb, ct.byref(g))
    event_add(&f->ev, None)


def addsock(lcurl.socket_t s, easy: ct.POINTER(lcurl.CURL), int action, g: GlobalInfo):
    # Initialize a new SockInfo structure
    SockInfo *fdp = calloc(1, sizeof(SockInfo));
    fdp->global = ct.pointer(g)
    setsock(fdp, s, easy, action, g)
    lcurl.multi_assign(g.multi, s, ct.cast(fdp, ct.c_void_p))


@lcurl.socket_callback
int sock_cb(e: ct.POINTER(lcurl.CURL), s: lcurl.socket_t, int what, void *cbp, void *sockp):
    # CURLMOPT_SOCKETFUNCTION
    g: GlobalInfo = ct.cast(cbp, ct.POINTER(GlobalInfo)).contents
    fdp: SockInfo * = (SockInfo *) sockp;

    whatstr = ["none", "IN", "OUT", "INOUT", "REMOVE"]

    print("socket callback: s=%d e=%p what=%s " %
          (s, e, whatstr[what]), end="", file=MSG_OUT)

    if what == lcurl.CURL_POLL_REMOVE:
        print(file=MSG_OUT)
        remsock(fdp)
    else:
        if not fdp:
            print("Adding data: %s" % whatstr[what], file=MSG_OUT)
            addsock(s, e, what, g)
        else:
            print("Changing action from %s to %s" %
                  (whatstr[fdp->action], whatstr[what]), file=MSG_OUT)
            setsock(fdp, s, e, what, g)

    return 0


@lcurl.xferinfo_callback
def xferinfo_cb(clientp, dltotal, dlnow, ultotal, ulnow):
    conn: ConnInfo = ct.cast(clientp, ct.POINTER(ConnInfo)).contents
    print("Progress: %s (%g/%g)" % (conn.url, dlnow, dltotal), file=MSG_OUT)
    return 0


def new_conn(char *url, GlobalInfo *g):
    # Create a new easy handle, and add it to the global curl_multi

    conn: ct.POINTER(ConnInfo) = calloc(1, sizeof(ConnInfo))
    conn->error[0] = '\0'

    conn->easy = lcurl.easy_init()
    if not conn->easy:
        print("libcurl.easy_init() failed, exiting!", file=MSG_OUT)
        exit(2);

    conn->global = g;
    conn->url = strdup(url);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_URL, conn->url);
    # this example just ignores the content
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_WRITEFUNCTION, lcurl.write_skipped)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_WRITEDATA, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_VERBOSE, 1)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_ERRORBUFFER, conn->error);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_PRIVATE, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_NOPROGRESS, 0)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_XFERINFOFUNCTION, xferinfo_cb)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_PROGRESSDATA, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_FOLLOWLOCATION, 1)

    print("Adding easy %p to multi %p (%s)" %
          (conn->easy, g->multi, url), file=MSG_OUT)
    rc: lcurl.CURLMcode = lcurl.multi_add_handle(g->multi, conn->easy)
    mcode_or_die("new_conn: libcurl.multi_add_handle", rc)

    # note that the add_handle() sets a time-out to trigger soon so that
    # the necessary socket_action() gets called


def fifo_cb(int fd, short event, void *arg):
    # This gets called whenever data is received from the fifo
    GlobalInfo *g = (GlobalInfo *)arg;

    char s[1024];

    while True:
        s[0] = '\0'
        int n = 0;
        long int rv = fscanf(g->input, "%1023s%n", s, &n);
        s[n] = '\0'
        if n == 0 or not s[0]:
            break
        if !strcmp(s, "stop"):
            g->stopped = True
            if g->still_running == 0:
                event_base_loopbreak(g->evbase);
        else:
            new_conn(s, arg)  # if we read a URL, go get it!
        if rv == EOF:
            break


static const char *fifo = b"hiper.fifo"

def init_fifo(g: GlobalInfo) -> int:
    # Create a named pipe and tell libevent to monitor it

    struct stat st;
    sockfd = lcurl.socket_t()

    print('Creating named pipe "%s"' % fifo, file=MSG_OUT)
    if lstat(fifo, &st) == 0:
        if (st.st_mode & S_IFMT) == S_IFREG:
            errno = EEXIST;
            perror("lstat")
            sys.exit(1)

    unlink(fifo);
    if mkfifo(fifo, 0o600) == -1:
        perror("mkfifo")
        sys.exit(1)

    sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0)
    if sockfd == -1:
        perror("open")
        sys.exit(1)

    g.input = fdopen(sockfd, "r");

    print("Now, pipe some URL's into > %s" % fifo, file=MSG_OUT)
    event_assign(ct.byref(g.fifo_event), g.evbase, sockfd,
                 EV_READ | EV_PERSIST, fifo_cb, ct.byref(g))
    event_add(ct.byref(g.fifo_event), None)

    return 0


def clean_fifo(g: GlobalInfo):
    event_del(&g.fifo_event);
    g.input.fclose()
    unlink(fifo);


def main(argv=sys.argv[1:]):

    g = GlobalInfo()

    g.evbase = event_base_new()
    init_fifo(g)

    g.multi = lcurl.multi_init()

    with curl_guard(False, None, g.multi) as guard:

        evtimer_assign(&g.timer_event, g.evbase, timer_cb, &g);

        # setup the generic multi interface options we want
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_SOCKETFUNCTION, sock_cb)
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_SOCKETDATA, ct.byref(g))
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_TIMERFUNCTION, multi_timer_cb)
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_TIMERDATA, ct.byref(g))

        # we do not call any curl_multi_socket*() function yet as we have no
        # handles added!

        event_base_dispatch(g.evbase);

        # this, of course, does not get called since the only way to stop this
        # program is via ctrl-C, but it is here to show how cleanup /would/ be
        # done.
        clean_fifo(g)
        event_del(&g.timer_event);
        event_base_free(g.evbase);

    return 0


sys.exit(main())
