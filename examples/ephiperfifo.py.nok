# **************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
# **************************************************************************

"""
Multi socket API usage with epoll and timerfd
"""

"""
/* Example application source code using the multi socket interface to
 * download many files at once.
 *
 * This example features the same basic functionality as hiperfifo.c does,
 * but this uses epoll and timerfd instead of libevent.
 *
 * Written by Jeff Pohlmeyer, converted to use epoll by Josh Bialkowski

Requires a Linux system with epoll

When running, the program creates the named pipe "hiper.fifo"

Whenever there is input into the fifo, the program reads the input as a list
of URL's and creates some new easy handles to fetch each URL via the
curl_multi "hiper" API.


Thus, you can try a single URL:
  % echo http://www.yahoo.com > hiper.fifo

Or a whole bunch of them:
  % cat my-url-list > hiper.fifo

The fifo buffer is handled almost instantly, so you can even add more URL's
while the previous requests are still being downloaded.

Note:
  For the sake of simplicity, URL length is limited to 1023 char's !

This is purely a demo app, all retrieved data is simply discarded by the write
callback.

"""

import sys
import ctypes as ct
#include <sys/epoll.h>

import libcurl as lcurl
from curl_utils import *  # noqa

MSG_OUT = sys.stdout  # Send info to stdout, change to stderr if you want


class FILE(ct.Structure): pass

class GlobalInfo(ct.Structure):
    # Global information, common to all connections
    _fields_ = [
    ("epfd",          ct.c_int),  # epoll filedescriptor
    ("tfd",           ct.c_int),  # timer filedescriptor
    ("fifofd",        ct.c_int),  # fifo filedescriptor
    ("multi",         ct.POINTER(lcurl.CURLM)),
    ("still_running", ct.c_int),
    ("input",         ct.POINTER(FILE)),
]


class ConnInfo(ct.Structure):
    # Information associated with a specific easy handle
    _fields_ = [
    ("easy",   ct.POINTER(lcurl.CURL)),
    char *url;
    ("global", ct.POINTER(GlobalInfo)),
    char error[CURL_ERROR_SIZE];
]


class SockInfo(ct.Structure):
    # Information associated with a specific socket
    _fields_ = [
    ("sockfd",  lcurl.socket_t),
    ("easy",    ct.POINTER(lcurl.CURL)),
    ("action",  ct.c_int),
    ("timeout", ct.c_long),
    ("global",  ct.POINTER(GlobalInfo)),
]


def mcode_or_die(where: str, mcode: lcurl.CURLMcode):
    # Die if we get a bad CURLMcode somewhere

    if mcode == lcurl.CURLM_OK:
        return

    if mcode == lcurl.CURLM_BAD_HANDLE:
        s = __STRING(CURLM_BAD_HANDLE)
    elif mcode == lcurl.CURLM_BAD_EASY_HANDLE:
        s = __STRING(CURLM_BAD_EASY_HANDLE)
    elif mcode == lcurl.CURLM_OUT_OF_MEMORY:
        s = __STRING(CURLM_OUT_OF_MEMORY)
    elif mcode == lcurl.CURLM_INTERNAL_ERROR:
        s = __STRING(CURLM_INTERNAL_ERROR)
    elif mcode == lcurl.CURLM_UNKNOWN_OPTION:
        s = __STRING(CURLM_UNKNOWN_OPTION)
    elif mcode == lcurl.CURLM_LAST:
        s = __STRING(CURLM_LAST)
    elif mcode == lcurl.CURLM_BAD_SOCKET:
        s = __STRING(CURLM_BAD_SOCKET)
        print("ERROR: %s returns %s" % (where, s), file=MSG_OUT)
        # ignore this error
        return
    else:
        s = "CURLM_unknown"
    print("ERROR: %s returns %s" % (where, s), file=MSG_OUT)

    sys.exit(mcode)


@lcurl.multi_timer_callback
def multi_timer_cb(multi, timeout_ms, userp):
    # Update the timer after curl_multi library does its thing. Curl informs the
    # application through this callback what it wants the new timeout to be,
    # after it does some work.
    g: GlobalInfo = ct.cast(userp, ct.POINTER(GlobalInfo)).contents

    print("multi_timer_cb: Setting timeout to %ld ms" % timeout_ms, file=MSG_OUT)

    its = struct itimerspec()
    if timeout_ms > 0:
        its.it_interval.tv_sec  = 0
        its.it_interval.tv_nsec = 0
        its.it_value.tv_sec     = (timeout_ms // 1000)
        its.it_value.tv_nsec    = (timeout_ms %  1000) * 1000 * 1000
    elif timeout_ms == 0:
        # libcurl wants us to timeout now, however setting both fields of
        # new_value.it_value to zero disarms the timer.
        # The closest we can do is to schedule the timer to fire in 1 ns.
        its.it_interval.tv_sec  = 0
        its.it_interval.tv_nsec = 0
        its.it_value.tv_sec     = 0
        its.it_value.tv_nsec    = 1
    else:
        memset(ct.byref(its), 0, ct.sizeof(its))
    timerfd_settime(g.tfd, 0, ct.byref(its), None)

    return 0


def check_multi_info(GlobalInfo *g):
    # Check for completed transfers, and remove their easy handles

    print("REMAINING: %d" % g->still_running, file=MSG_OUT)

    while True:
        msgs_left = ct.c_int()
        msgp: ct.POINTER(lcurl.CURLMsg) = lcurl.multi_info_read(g->multi,
                                                                ct.byref(msgs_left))
        if not msgp: break
        msg = msgp.contents

        if msg.msg != lcurl.CURLMSG_DONE: continue

        easy: ct.POINTER(lcurl.CURL) = msg.easy_handle
        res:  lcurl.CURLcode         = msg.data.result

        conn = ct.POINTER(ConnInfo)()
        eff_url = ct.c_char_p(None)
        lcurl.easy_getinfo(easy, lcurl.CURLINFO_PRIVATE, ct.byref(conn))
        lcurl.easy_getinfo(easy, lcurl.CURLINFO_EFFECTIVE_URL, ct.byref(eff_url))
        print("DONE: %s => (%d) %s" % (eff_url, res, conn->error), file=MSG_OUT)

        lcurl.multi_remove_handle(g->multi, easy)
        libc.free(conn->url)
        lcurl.easy_cleanup(easy)
        libc.free(conn)


def event_cb(g: GlobalInfo, fd: int, revents: int):
    # Called by libevent when we get action on a multi socket filedescriptor

    action: int = (((revents & EPOLLIN)  ? lcurl.CURL_CSELECT_IN  : 0) |
                   ((revents & EPOLLOUT) ? lcurl.CURL_CSELECT_OUT : 0))

    rc: lcurl.CURLMcode = lcurl.multi_socket_action(g.multi, fd, action,
                                                    ct.byref(g.still_running))
    mcode_or_die("event_cb: libcurl.multi_socket_action", rc)

    check_multi_info(g)
    if g.still_running <= 0:
        print("last transfer done, kill timeout", file=MSG_OUT)
        its = struct itimerspec()
        memset(ct.byref(its), 0, sizeof(its))
        timerfd_settime(g.tfd, 0, ct.byref(its), None)


def timer_cb(g: GlobalInfo, revents: int):
    # Called by main loop when our timeout expires

    count = ct.c_uint64(0)
    err: int = read(g.tfd, ct.byref(count), ct.sizeof(count))
    if err == -1:
        # Note that we may call the timer callback even if the timerfd is not
        # readable. It's possible that there are multiple events stored in the
        # epoll buffer (i.e. the timer may have fired multiple times). The event
        # count is cleared after the first call so future events in the epoll
        # buffer fails to read from the timer.
        if errno == EAGAIN:
            print("EAGAIN on tfd %d" % g.tfd, file=MSG_OUT)
            return

    if err != ct.sizeof(count):
        print("read(tfd) == %ld" % err, end="", file=sys.stderr)
        perror("read(tfd)")

    rc: lcurl.CURLMcode = lcurl.multi_socket_action(g.multi, lcurl.CURL_SOCKET_TIMEOUT,
                                                    0, ct.byref(g.still_running))
    mcode_or_die("timer_cb: libcurl.multi_socket_action", rc)
    check_multi_info(g)


def remsock(f: SockInfo *, g: GlobalInfo):
    # Clean up the SockInfo structure
    if f:
        if f->sockfd:
            if epoll_ctl(g.epfd, EPOLL_CTL_DEL, f->sockfd, None):
                print("EPOLL_CTL_DEL failed for fd: %d : %s" %
                      (f->sockfd, strerror(errno)), file=sys.stderr)
        free(f);


def setsock(SockInfo *f, s: lcurl.socket_t, e: ct.POINTER(lcurl.CURL), action: int, g: GlobalInfo):
    # Assign information to a SockInfo structure

    struct epoll_event ev;

    kind: int = ((EPOLLIN  if action & lcurl.CURL_POLL_IN  else 0) |
                 (EPOLLOUT if action & lcurl.CURL_POLL_OUT else 0))

    if f->sockfd:
        if epoll_ctl(g.epfd, EPOLL_CTL_DEL, f->sockfd, None):
            print("EPOLL_CTL_DEL failed for fd: %d : %s" %
                  (f->sockfd, strerror(errno)), file=sys.stderr);

    f->sockfd = s
    f->action = action
    f->easy   = e;

    ev.events  = kind
    ev.data.fd = s
    if epoll_ctl(g.epfd, EPOLL_CTL_ADD, s, ct.byref(ev)):
        print("EPOLL_CTL_ADD failed for fd: %d : %s" %
              (s, strerror(errno)), file=sys.stderr)


def addsock(lcurl.socket_t s, easy: ct.POINTER(lcurl.CURL), int action, g: GlobalInfo):
    # Initialize a new SockInfo structure
    SockInfo *fdp = (SockInfo*)calloc(1, sizeof(SockInfo));

    fdp->global = &g;
    setsock(fdp, s, easy, action, g)

    lcurl.multi_assign(g.multi, s, fdp)


@lcurl.socket_callback
int sock_cb(e: ct.POINTER(lcurl.CURL), s: lcurl.socket_t, int what, void *cbp, void *sockp):
    # CURLMOPT_SOCKETFUNCTION
    g: GlobalInfo = ct.cast(cbp, ct.POINTER(GlobalInfo)).contents
    SockInfo * fdp = (SockInfo*) sockp;

    whatstr = ["none", "IN", "OUT", "INOUT", "REMOVE"]

    print("socket callback: s=%d e=%p what=%s " %
          (s, e, whatstr[what]), end="", file=MSG_OUT)

    if what == lcurl.CURL_POLL_REMOVE:
        print(file=MSG_OUT)
        remsock(fdp, g)
    else:
        if not fdp:
            print("Adding data: %s" % whatstr[what], file=MSG_OUT)
            addsock(s, e, what, g)
        else:
            print("Changing action from %s to %s" %
                  (whatstr[fdp->action], whatstr[what]), file=MSG_OUT)
            setsock(fdp, s, e, what, g)

    return 0


@lcurl.progress_callback
def prog_cb(clientp, dltotal, dlnow, ultotal, ulnow):
    conn: ConnInfo = ct.cast(clientp, ct.POINTER(ConnInfo)).contents
    print("Progress: %s (%g/%g)" % (conn.url, dlnow, dltotal), file=MSG_OUT)
    return 0


def new_conn(char *url, GlobalInfo *g):
    # Create a new easy handle, and add it to the global curl_multi

    conn = (ConnInfo *) calloc(1, sizeof(ConnInfo))
    conn->error[0] = '\0'

    conn->easy = lcurl.easy_init()
    if not conn->easy:
        print("libcurl.easy_init() failed, exiting!", file=MSG_OUT)
        exit(2);

    conn->global = g;
    conn->url = strdup(url);

    lcurl.easy_setopt(conn->easy, CURLOPT_URL, conn->url);
    # this example just ignores the content
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_WRITEFUNCTION, write_function)
    lcurl.easy_setopt(conn->easy, CURLOPT_WRITEDATA, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_VERBOSE, 1)
    lcurl.easy_setopt(conn->easy, CURLOPT_ERRORBUFFER, conn->error);
    lcurl.easy_setopt(conn->easy, CURLOPT_PRIVATE, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_NOPROGRESS, 0)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_PROGRESSFUNCTION, prog_cb)
    lcurl.easy_setopt(conn->easy, CURLOPT_PROGRESSDATA, conn);
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_FOLLOWLOCATION, 1)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_LOW_SPEED_TIME, 3)
    lcurl.easy_setopt(conn->easy, lcurl.CURLOPT_LOW_SPEED_LIMIT, 10)

    print("Adding easy %p to multi %p (%s)" %
          (conn->easy, g->multi, url), file=MSG_OUT)
    rc: lcurl.CURLMcode = lcurl.multi_add_handle(g->multi, conn->easy)

    mcode_or_die("new_conn: libcurl.multi_add_handle", rc)

    # note that the add_handle() sets a timeout to trigger soon so that the
    # necessary socket_action() call gets called by this app


def fifo_cb(GlobalInfo* g, revents: int):
    # This gets called whenever data is received from the fifo
    char s[1024];

    while True:
        s[0] = '\0'
        int n = 0;
        long int rv = fscanf(g->input, "%1023s%n", s, &n);
        s[n] = '\0'
        if n == 0 or not s[0]:
            break
        new_conn(s, g)  # if we read a URL, go get it!
        if rv == EOF:
            break


static const char *fifo = b"hiper.fifo"

def init_fifo(g: GlobalInfo) -> int:
    # Create a named pipe and tell libevent to monitor it

    struct stat st;
    sockfd = lcurl.socket_t()
    struct epoll_event epev;

    print('Creating named pipe "%s"' % fifo, file=MSG_OUT)
    if lstat(fifo, &st) == 0:
        if (st.st_mode & S_IFMT) == S_IFREG:
            errno = EEXIST;
            perror("lstat")
            sys.exit(1)

    unlink(fifo);
    if mkfifo(fifo, 0o600) == -1:
        perror("mkfifo")
        sys.exit(1)

    sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
    if sockfd == -1:
        perror("open")
        sys.exit(1)

    g->fifofd = sockfd;
    g->input  = fdopen(sockfd, "r");

    epev.events = EPOLLIN;
    epev.data.fd = sockfd;
    epoll_ctl(g->epfd, EPOLL_CTL_ADD, sockfd, &epev);

    print("Now, pipe some URL's into > %s" % fifo, file=MSG_OUT)

    return 0


def clean_fifo(g: GlobalInfo):
    epoll_ctl(g.epfd, EPOLL_CTL_DEL, g.fifofd, None)
    g.input.fclose()
    unlink(fifo);


g_should_exit_: bool = False

def sigint_handler(int signo):
    global g_should_exit_
    g_should_exit_ = True


def main(argv=sys.argv[1:]):

    global g_should_exit_

    g = GlobalInfo()
    memset(&g, 0, sizeof(GlobalInfo));

    its = struct itimerspec()
    struct epoll_event ev;
    struct epoll_event events[10];

    g_should_exit_ = False
    signal(SIGINT, sigint_handler);

    g.epfd = epoll_create1(EPOLL_CLOEXEC);
    if g.epfd == -1:
        perror("epoll_create1 failed");
        return 1

    g.tfd = timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK |
                                            TFD_CLOEXEC)
    if g.tfd == -1:
        perror("timerfd_create failed");
        return 1

    memset(ct.byref(its), 0, sizeof(its))
    its.it_interval.tv_sec = 0
    its.it_value.tv_sec    = 1
    timerfd_settime(g.tfd, 0, ct.byref(its), None)

    ev.events  = EPOLLIN
    ev.data.fd = g.tfd
    epoll_ctl(g.epfd, EPOLL_CTL_ADD, g.tfd, ct.byref(ev))

    init_fifo(g)

    g.multi = lcurl.multi_init()

    with curl_guard(False, None, g.multi) as guard:

        # setup the generic multi interface options we want
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_SOCKETFUNCTION, sock_cb)
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_SOCKETDATA, ct.byref(g))
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_TIMERFUNCTION, multi_timer_cb)
        lcurl.multi_setopt(g.multi, lcurl.CURLMOPT_TIMERDATA, ct.byref(g))

        # we do not call any curl_multi_socket*() function yet as we have
        # no handles added!

        print("Entering wait loop", file=MSG_OUT)
        MSG_OUT.flush()
        while not g_should_exit_:

            err: int = epoll_wait(g.epfd, events,
                                  sizeof(events) / sizeof(struct epoll_event),
                                  10000)
            if err == -1:
                if errno == EINTR:
                    print("note: wait interrupted", file=MSG_OUT)
                    continue
                else:
                    perror("epoll_wait")
                    return 1

            for idx in range(err):
                if events[idx].data.fd == g.fifofd:
                    fifo_cb(&g, events[idx].events);
                elif events[idx].data.fd == g.tfd:
                    timer_cb(g, events[idx].events);
                else:
                    event_cb(g, events[idx].data.fd, events[idx].events)

        print("Exiting normally.", file=MSG_OUT)
        MSG_OUT.flush()

    clean_fifo(g)

    return 0


sys.exit(main())
