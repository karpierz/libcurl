# **************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
# **************************************************************************

"""
Multi_socket API using libuv
"""

import sys
import ctypes as ct

#include <uv.h>  # uv_timer_t, uv_timer_init, uv_timer_start, uv_timer_stop
                 # uv_loop_t, uv_poll_t,  uv_handle_t, uv_poll_init_socket
                 # UV_RUN_DEFAULT, uv_run, uv_close

import libcurl as lcurl
from curl_utils import *  # noqa


# Use the socket_action interface to download multiple files in parallel,
# powered by libuv.
#
# Requires libuv and (of course) libcurl.
#
# See https://docs.libuv.org/en/v1.x/index.html libuv API documentation


class datauv(ct.Structure):
    # object to pass to the callbacks
    _fields_ = [
    ("timeout", uv_timer_t),
    ("loop",    ct.POINTER(uv_loop_t)),
    ("multi",   ct.POINTER(lcurl.CURLM)),
]


class curl_context_t(ct.Structure):
    _fields_ = [
    ("poll_handle", uv_poll_t),
    ("sockfd",      lcurl.socket_t),
    ("uv",          ct.POINTER(datauv)),
]


def create_curl_context(sockfd: lcurl.socket_t,
                        uv: ct.POINTER(datauv)) -> ct.POINTER(curl_context_t):

    context = ct.cast(malloc(ct.sizeof(curl_context_t)), ct.POINTER(curl_context_t))
    context->sockfd = sockfd
    context->uv     = uv

    uv_poll_init_socket(uv->loop, &context->poll_handle, sockfd)
    context->poll_handle.data = context

    return context


def curl_close_cb(handle: ct.POINTER(uv_handle_t)):

    context = ct.cast(handle->data, ct.POINTER(curl_context_t))

    free(context);


def destroy_curl_context(context: ct.POINTER(curl_context_t)):

    uv_close(ct.cast(&context->poll_handle, ct.POINTER(uv_handle_t)),
             curl_close_cb)


def add_download(url: str, num: int, mcurl: ct.POINTER(lcurl.CURLM)):

    filename = "%d.download" % num

    try:
        FILE * file = open(filename, "wb")
    except:
        print("Error opening %s" % filename, file=sys.stderr)
        return

    handle: ct.POINTER(lcurl.CURL) = lcurl.easy_init()
    lcurl.easy_setopt(handle, lcurl.CURLOPT_URL, url.encode("utf-8"))
    curl_easy_setopt(handle, lcurl.CURLOPT_WRITEDATA, file)
    curl_easy_setopt(handle, lcurl.CURLOPT_PRIVATE,   file)

    lcurl.multi_add_handle(mcurl, handle)

    print("Added download %s -> %s" % (url, filename), file=sys.stderr)


def check_multi_info(context: ct.POINTER(curl_context_t)):

    while True:
        pending = ct.c_int()
        msgp: ct.POINTER(lcurl.CURLMsg) = lcurl.multi_info_read(context->uv->multi,
                                                                ct.byref(pending))
        if not msgp: break
        message = msgp.contents

        if message.msg == CURLMSG_DONE:
            # Do not use message data after calling libcurl.multi_remove_handle() and
            # libcurl.easy_cleanup(). As per libcurl.multi_info_read() docs:
            # "WARNING: The data the returned pointer points to does not survive
            # calling curl_multi_cleanup, curl_multi_remove_handle or
            # curl_easy_cleanup."
            easy_handle: ct.POINTER(lcurl.CURL) = message.easy_handle

            done_url = ct.c_char_p(None)
            FILE *file;= NULL
            lcurl.easy_getinfo(easy_handle, lcurl.CURLINFO_EFFECTIVE_URL, &done_url);
            lcurl.easy_getinfo(easy_handle, lcurl.CURLINFO_PRIVATE, &file);
            print("%s DONE" % done_url)

            lcurl.multi_remove_handle(context->uv->multi, easy_handle)
            lcurl.easy_cleanup(easy_handle)
            if file: file.fclose()
        else:
            print("CURLMSG default", file=sys.stderr)


def on_uv_socket(req: ct.POINTER(uv_poll_t), status: int, events: int):
    # callback from libuv on socket activity
    context: ct.POINTER(curl_context_t) = ct.cast(req->data, ct.POINTER(curl_context_t))

    flags: int = 0
    if events & UV_READABLE:
        flags |= lcurl.CURL_CSELECT_IN
    if events & UV_WRITABLE:
        flags |= lcurl.CURL_CSELECT_OUT

    running_handles = ct.c_int()
    lcurl.multi_socket_action(context->uv->multi, context->sockfd, flags,
                              ct.byref(running_handles))
    check_multi_info(context)


def on_uv_timeout(req: ct.POINTER(uv_timer_t)):
    # callback from libuv when timeout expires
    curl_context_t * context = (curl_context_t *) req->data;
    if context:
        running_handles = ct.c_int()
        lcurl.multi_socket_action(context->uv->multi, lcurl.CURL_SOCKET_TIMEOUT,
                                  0, ct.byref(running_handles))
        check_multi_info(context)


@lcurl.multi_timer_callback
def cb_timeout(multi, timeout_ms, userp):
    # callback from libcurl to update the timeout expiry
    uv: ct.POINTER(datauv) = ct.cast(userp, (ct.POINTER(datauv)))

    if timeout_ms < 0:
        uv_timer_stop(&uv->timeout)
    else:
        if timeout_ms == 0:
            timeout_ms = 1  # 0 means call curl_multi_socket_action asap but NOT
                            # within the callback itself
        uv_timer_start(&uv->timeout, on_uv_timeout, ct.c_uint64(imeout_ms), 0)  # do not repeat

    return 0


@lcurl.socket_callback
int cb_socket(easy: ct.POINTER(lcurl.CURL), s: lcurl.socket_t, int action, ct.POINTER(datauv) uv, void *socketp):
    # callback from libcurl to update socket activity to wait for

    events: int = 0

    if action in (lcurl.CURL_POLL_IN,
                  lcurl.CURL_POLL_OUT,
                  lcurl.CURL_POLL_INOUT):

        curl_context = (ct.cast(socketp, ct.POINTER(curl_context_t))
                        if socketp else create_curl_context(s, uv))

        lcurl.multi_assign(uv->multi, s, (void *) curl_context);

        if action != lcurl.CURL_POLL_IN:
            events |= UV_WRITABLE
        if action != lcurl.CURL_POLL_OUT:
            events |= UV_READABLE

        uv_poll_start(&curl_context->poll_handle, events, on_uv_socket)

    elif action == lcurl.CURL_POLL_REMOVE:

        if socketp:
            curl_context: ct.POINTER(curl_context_t) = ct.cast(socketp, ct.POINTER(curl_context_t))

            uv_poll_stop(&(curl_context)->poll_handle)
            destroy_curl_context(curl_context)
            lcurl.multi_assign(uv->multi, s, None)

    else:
        abort()

    return 0


def main(argv=sys.argv[1:]):

    if not argv:
        return 0

    lcurl.global_init(lcurl.CURL_GLOBAL_ALL)

    uv = datauv(0)
    uv.loop = uv_default_loop()
    uv_timer_init(uv.loop, ct.byref(uv.timeout))

    uv.multi = lcurl.multi_init()

    with curl_guard(True, None, uv.multi) as guard:

        lcurl.multi_setopt(uv.multi, lcurl.CURLMOPT_SOCKETFUNCTION, cb_socket)
        lcurl.multi_setopt(uv.multi, lcurl.CURLMOPT_SOCKETDATA, ct.byref(uv))
        lcurl.multi_setopt(uv.multi, lcurl.CURLMOPT_TIMERFUNCTION,  cb_timeout)
        lcurl.multi_setopt(uv.multi, lcurl.CURLMOPT_TIMERDATA,  ct.byref(uv))

        for i, arg in enumerate(argv):
            add_download(arg, i + 1, uv.multi)

        # kickstart the thing
        running_handles = ct.c_int()
        lcurl.multi_socket_action(uv.multi, lcurl.CURL_SOCKET_TIMEOUT, 0,
                                  ct.byref(running_handles))
        uv_run(uv.loop, UV_RUN_DEFAULT)

    return 0


sys.exit(main())
